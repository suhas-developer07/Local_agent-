"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelJob = exports.cancelAllJobs = exports.printFile = exports.printBuffer = exports.getAllPrinterOptions = exports.getPrinterOptions = exports.getPrinterNames = exports.getNotCompletedQueue = exports.getCompletedQueue = void 0;
var system_util_1 = require("./system-util");
var getCompletedQueue = function (options) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    return [2 /*return*/, getQueue(true, options)];
}); }); };
exports.getCompletedQueue = getCompletedQueue;
var getNotCompletedQueue = function (options) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    return [2 /*return*/, getQueue(false, options)];
}); }); };
exports.getNotCompletedQueue = getNotCompletedQueue;
var getQueue = function (completed, options) {
    if (completed === void 0) { completed = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var args, printers, stdout;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    args = ['-W', completed ? 'completed' : 'not-completed'];
                    printers = (options !== null && options !== void 0 ? options : {}).printers;
                    if (printers && printers.length) {
                        args.push('-d', printers.join(','));
                    }
                    return [4 /*yield*/, system_util_1.spawn('lpstat', args)];
                case 1:
                    stdout = (_a.sent()).stdout;
                    return [2 /*return*/, stdout
                            .split('\n')
                            .filter(function (line) { return !!line; })
                            .map(function (line) { return line.split(/\s{2,}/); })
                            .filter(function (row) { return row.length === 4; })
                            .map(function (row) {
                            var requestId = row[0], user = row[1], size = row[2], date = row[3];
                            var pattern = /(.*)-(\d+)$/;
                            var match = pattern.exec(requestId);
                            var _a = match !== null && match !== void 0 ? match : [], _all = _a[0], printerName = _a[1], id = _a[2];
                            return {
                                printerName: printerName,
                                id: id,
                                user: user,
                                size: size,
                                date: date,
                            };
                        })];
            }
        });
    });
};
// list printers
var getPrinterNames = function () { return __awaiter(void 0, void 0, void 0, function () {
    var stdout, names;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, system_util_1.spawn('lpstat', ['-p'])];
            case 1:
                stdout = (_a.sent()).stdout;
                names = stdout.split('\n').map(function (line) {
                    var _a = line.split(' '), _type = _a[0], name = _a[1];
                    return name;
                });
                return [2 /*return*/, names.filter(function (name) { return !!name; })];
        }
    });
}); };
exports.getPrinterNames = getPrinterNames;
var getPrinterOptions = function (printerName) { return __awaiter(void 0, void 0, void 0, function () {
    var stdout, options;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, system_util_1.spawn('lpoptions', ['-p', printerName, '-l'])];
            case 1:
                stdout = (_a.sent()).stdout;
                options = [];
                stdout
                    .split('\n')
                    .filter(function (line) { return !!line; })
                    .forEach(function (line) {
                    var _a = line.split(': '), names = _a[0], list = _a[1];
                    if (!names || !list) {
                        return;
                    }
                    var name = names.split('/')[0];
                    var entry = {
                        name: name,
                        values: [],
                    };
                    var values = list.split(' ').map(function (value) {
                        if (value.charAt(0) === '*') {
                            var val = value.substring(1);
                            entry.defaultValue = val;
                            return val;
                        }
                        return value;
                    });
                    entry.values = values;
                    options.push(entry);
                });
                return [2 /*return*/, options];
        }
    });
}); };
exports.getPrinterOptions = getPrinterOptions;
var getAllPrinterOptions = function () { return __awaiter(void 0, void 0, void 0, function () {
    var names, options;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.getPrinterNames()];
            case 1:
                names = _a.sent();
                options = names.map(function (printerName) { return __awaiter(void 0, void 0, void 0, function () {
                    var options;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, exports.getPrinterOptions(printerName)];
                            case 1:
                                options = _a.sent();
                                return [2 /*return*/, {
                                        printerName: printerName,
                                        options: options,
                                    }];
                        }
                    });
                }); });
                return [4 /*yield*/, Promise.all(options)];
            case 2: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.getAllPrinterOptions = getAllPrinterOptions;
var print = function (command) {
    return function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, printer, copies, priority, pages, fitToPage, printerOptions, lpArgs, stdout, pattern, match, requestId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = params !== null && params !== void 0 ? params : {}, printer = _a.printer, copies = _a.copies, priority = _a.priority, pages = _a.pages, fitToPage = _a.fitToPage, printerOptions = _a.printerOptions;
                    lpArgs = [];
                    if (printer) {
                        lpArgs.push('-d', printer);
                    }
                    if (copies) {
                        lpArgs.push('-n', copies.toString());
                    }
                    if (priority) {
                        lpArgs.push('-q', priority.toString());
                    }
                    if (pages) {
                        lpArgs.push('-P', pages);
                    }
                    if (fitToPage) {
                        lpArgs.push('-o', 'fit-to-page');
                    }
                    Object.entries(printerOptions !== null && printerOptions !== void 0 ? printerOptions : {}).forEach(function (_a) {
                        var key = _a[0], value = _a[1];
                        lpArgs.push('-o', key + "=" + value);
                    });
                    return [4 /*yield*/, command(lpArgs)
                        // example stdout: request id is epson-et-16650-9037 (1 file(s))
                    ];
                case 1:
                    stdout = (_b.sent()).stdout;
                    pattern = /(\S*-\d+) \(.*\)\n$/;
                    match = pattern.exec(stdout);
                    requestId = match ? match === null || match === void 0 ? void 0 : match[1] : undefined;
                    return [2 /*return*/, {
                            stdout: stdout,
                            requestId: requestId,
                        }];
            }
        });
    }); };
};
var printBuffer = function (data, params) { return __awaiter(void 0, void 0, void 0, function () {
    var command;
    return __generator(this, function (_a) {
        command = function (args) { return system_util_1.spawn('lp', args, data); };
        return [2 /*return*/, print(command)(params)];
    });
}); };
exports.printBuffer = printBuffer;
var printFile = function (file, params) { return __awaiter(void 0, void 0, void 0, function () {
    var command;
    return __generator(this, function (_a) {
        command = function (args) { return system_util_1.spawn('lp', __spreadArray(__spreadArray([], args), ['--', file])); };
        return [2 /*return*/, print(command)(params)];
    });
}); };
exports.printFile = printFile;
// cancel print job
var cancelAllJobs = function (printer) { return __awaiter(void 0, void 0, void 0, function () {
    var args;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                args = [];
                if (printer) {
                    args.push('-a', printer);
                }
                return [4 /*yield*/, system_util_1.spawn('cancel', args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.cancelAllJobs = cancelAllJobs;
var cancelJob = function (requestId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, system_util_1.spawn('cancel', [requestId])];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.cancelJob = cancelJob;
